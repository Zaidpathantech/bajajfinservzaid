import pandas as pd
import re

def is_valid_email(email):
    if not isinstance(email, str):
    return False
    pattern = r'^[a-zA-Z_][a-zA-Z0-9_]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

def find_latest_consecutive_absences(group):
    group = group.sort_values('attendance_date').reset_index(drop=True)
    group['is_absent'] = (group['status'] == 'Absent').astype(int)
    group['streak_group'] = (group['is_absent'].diff() != 0).cumsum()
    
    streaks = group[group['is_absent'] == 1].groupby('streak_group').agg(
        start_date=('attendance_date', 'first'),
        end_date=('attendance_date', 'last'),
        total_days=('attendance_date', 'count')
    ).reset_index(drop=True)
    
    valid_streaks = streaks[streaks['total_days'] > 3]
    return valid_streaks.iloc[-1] if not valid_streaks.empty else None

def run(path):
    attendance_df = pd.read_excel(path, sheet_name='Attendance_data')
    students_df = pd.read_excel(path, sheet_name='Student_data')
    attendance_df['attendance_date'] = pd.to_datetime(attendance_df['attendance_date'])
    
    consecutive_absences = attendance_df.groupby('student_id', group_keys=False).apply(
        find_latest_consecutive_absences, include_groups=False
    ).reset_index()
    
    result_df = pd.merge(consecutive_absences, students_df, on='student_id', how='left')
    result_df['email'] = result_df['parent_email'].apply(lambda x: x if is_valid_email(x) else None)
    
    result_df['msg'] = result_df.apply(
        lambda row: (
            f"Dear Parent, your child {row['student_name']} was absent from {row['start_date'].date()} to {row['end_date'].date()} "
            f"for {row['total_days']} days. Please ensure their attendance improves."
        ) if pd.notna(row['email']) else None,
        axis=1
    )
    
    return result_df[['student_id', 'start_date', 'end_date', 'total_days', 'email', 'msg']]